1/(2.11+2.75)
1/(0.211+0.275)
rm(list=ls())
# amplifier functions
ampch1<-function(vout){
0.012 * vout - 0.094 #cal 5-02-16 alice & mike
}
ampch2<-function(vout){
0.0118 * vout - 0.5235 #cal 5-02-16 alice & mike
}
### Unit 4 (A)  pre-insulation
u4p<-read.csv("30-11.prn",sep="\t",stringsAsFactors=FALSE)
id<-seq(1,nrow(u4p))
u4p<-cbind(id,u4p)
names(u4p)<-c("id","date","time","T1","T2","T3","T4","hp1","hp2")
ymax=max(u4p$T2)
ymin=min(u4p$T1)
library(rafalib)
mypar(2,1)
plot(u4p$T1,type="l",ylim=c(ymin,ymax)) # outside
lines(u4p$T2,col=2) # inside
lines(u4p$T3,col=3) # inside
lines(u4p$T4,col=4) # outside
index=u4p$id>200 & u4p$id<4450
# heat plate plots
u4p$hp1preamp1<-ampch1(u4p$hp1)
u4p$hp1flux1<-u1$hp1preamp1/0.06
u4p$hp2preamp2<-ampch2(u4p$hp2)
u4p$hp2flux2<-u4p$hp2preamp2/0.06
plot(u4p$id[index],u4p$hp1flux1[index],type="l")
plot(u4p$id[index],u4p$hp2flux2[index],col="blue",type="l")
Qexp<-u4p$hp2flux2[index]
Qexp<- -Qexp[-1]
Tint<-u4p$T3[index]
Text<-u4p$T4[index]
t=u4p$id[index]
Tm=numeric()
Q=numeric()
mypar(1,1)
R1=0.447
R2=0.404
C=13640
Tm_init=10
tau=60
Qt<-function(R1,R2,Tm_init,C){
Tm[1]=Tm_init
for (i in 1:(length(t)-1)){
dt=60*(t[i+1]-t[i])
Q[i]=(Tint[i]-Tm[i])/R1
Tm[i+1]=((Tint[i+1]/R1)+(Text[i+1]/R2)+C*Tm[i]/dt)/(1/R1 + 1/R2 + C/dt)
}
Q
}
Q<-Qt(R1,R2,Tm_init,C)
plot(Qexp,type="l",ylim=c(min(min(Q),min(Qexp)),max(max(Q),max(Qexp))),xlab="Time (min)",ylab="Heat flux Q (W/m^2)",col="red")
lines(Q,col="blue")
legend("topright", c("Measured", "Predicted"), pch="o", col=c("red", "blue"))
LL <- function(R1,R2,Tm_init,C, mu, sigma) {
R = Qexp-Qt(R1,R2,Tm_init,C)
#
R = suppressWarnings(dnorm(R, mu, sigma, log = TRUE))
#
-sum(R)
}
library(stats4)
fit4p<-mle(LL,
start = list(R1=0.4,R2=0.4,Tm_init=10,C=13640,sigma=1),
fixed=list(mu=0),
nobs = length(Q),
lower = c(.1,.1,5,10000,0.1),
upper = c(1,1.,17,2000000,5),
method= "L-BFGS-B"
)
u4p$hp1preamp1<-ampch1(u4p$hp1)
u4p$hp1flux1<-u4p$hp1preamp1/0.06
u4p$hp2preamp2<-ampch2(u4p$hp2)
u4p$hp2flux2<-u4p$hp2preamp2/0.06
plot(u4p$id[index],u4p$hp1flux1[index],type="l")
plot(u4p$id[index],u4p$hp2flux2[index],col="blue",type="l")
Qexp<-u4p$hp1flux1[index]
Qexp<- Qexp[-1]
Tint<-u4p$T3[index]
Text<-u4p$T4[index]
t=u4p$id[index]
Tm=numeric()
Q=numeric()
mypar(1,1)
R1=0.447
R2=0.404
C=13640
Tm_init=10
tau=60
Qt<-function(R1,R2,Tm_init,C){
Tm[1]=Tm_init
for (i in 1:(length(t)-1)){
dt=60*(t[i+1]-t[i])
Q[i]=(Tint[i]-Tm[i])/R1
Tm[i+1]=((Tint[i+1]/R1)+(Text[i+1]/R2)+C*Tm[i]/dt)/(1/R1 + 1/R2 + C/dt)
}
Q
}
Q<-Qt(R1,R2,Tm_init,C)
plot(Qexp,type="l",ylim=c(min(min(Q),min(Qexp)),max(max(Q),max(Qexp))),xlab="Time (min)",ylab="Heat flux Q (W/m^2)",col="red")
lines(Q,col="blue")
legend("topright", c("Measured", "Predicted"), pch="o", col=c("red", "blue"))
C=136400
R1=0.447
R2=0.404
C=136400
Tm_init=10
tau=60
Qt<-function(R1,R2,Tm_init,C){
Tm[1]=Tm_init
for (i in 1:(length(t)-1)){
dt=60*(t[i+1]-t[i])
Q[i]=(Tint[i]-Tm[i])/R1
Tm[i+1]=((Tint[i+1]/R1)+(Text[i+1]/R2)+C*Tm[i]/dt)/(1/R1 + 1/R2 + C/dt)
}
Q
}
Q<-Qt(R1,R2,Tm_init,C)
plot(Qexp,type="l",ylim=c(min(min(Q),min(Qexp)),max(max(Q),max(Qexp))),xlab="Time (min)",ylab="Heat flux Q (W/m^2)",col="red")
lines(Q,col="blue")
legend("topright", c("Measured", "Predicted"), pch="o", col=c("red", "blue"))
R1=0.447
R2=0.404
C=136400
Tm_init=6
tau=60
Qt<-function(R1,R2,Tm_init,C){
Tm[1]=Tm_init
for (i in 1:(length(t)-1)){
dt=60*(t[i+1]-t[i])
Q[i]=(Tint[i]-Tm[i])/R1
Tm[i+1]=((Tint[i+1]/R1)+(Text[i+1]/R2)+C*Tm[i]/dt)/(1/R1 + 1/R2 + C/dt)
}
Q
}
Q<-Qt(R1,R2,Tm_init,C)
plot(Qexp,type="l",ylim=c(min(min(Q),min(Qexp)),max(max(Q),max(Qexp))),xlab="Time (min)",ylab="Heat flux Q (W/m^2)",col="red")
lines(Q,col="blue")
legend("topright", c("Measured", "Predicted"), pch="o", col=c("red", "blue"))
R1=0.447
R2=0.404
C=13640
Tm_init=8
tau=60
Qt<-function(R1,R2,Tm_init,C){
Tm[1]=Tm_init
for (i in 1:(length(t)-1)){
dt=60*(t[i+1]-t[i])
Q[i]=(Tint[i]-Tm[i])/R1
Tm[i+1]=((Tint[i+1]/R1)+(Text[i+1]/R2)+C*Tm[i]/dt)/(1/R1 + 1/R2 + C/dt)
}
Q
}
Q<-Qt(R1,R2,Tm_init,C)
plot(Qexp,type="l",ylim=c(min(min(Q),min(Qexp)),max(max(Q),max(Qexp))),xlab="Time (min)",ylab="Heat flux Q (W/m^2)",col="red")
lines(Q,col="blue")
legend("topright", c("Measured", "Predicted"), pch="o", col=c("red", "blue"))
C=1364000
R1=0.2
R2=0.2
C=1364000
Tm_init=8
tau=60
Qt<-function(R1,R2,Tm_init,C){
Tm[1]=Tm_init
for (i in 1:(length(t)-1)){
dt=60*(t[i+1]-t[i])
Q[i]=(Tint[i]-Tm[i])/R1
Tm[i+1]=((Tint[i+1]/R1)+(Text[i+1]/R2)+C*Tm[i]/dt)/(1/R1 + 1/R2 + C/dt)
}
Q
}
Q<-Qt(R1,R2,Tm_init,C)
plot(Qexp,type="l",ylim=c(min(min(Q),min(Qexp)),max(max(Q),max(Qexp))),xlab="Time (min)",ylab="Heat flux Q (W/m^2)",col="red")
lines(Q,col="blue")
legend("topright", c("Measured", "Predicted"), pch="o", col=c("red", "blue"))
R1=0.2
R2=0.2
C=13640
Tm_init=8
tau=60
Qt<-function(R1,R2,Tm_init,C){
Tm[1]=Tm_init
for (i in 1:(length(t)-1)){
dt=60*(t[i+1]-t[i])
Q[i]=(Tint[i]-Tm[i])/R1
Tm[i+1]=((Tint[i+1]/R1)+(Text[i+1]/R2)+C*Tm[i]/dt)/(1/R1 + 1/R2 + C/dt)
}
Q
}
Q<-Qt(R1,R2,Tm_init,C)
plot(Qexp,type="l",ylim=c(min(min(Q),min(Qexp)),max(max(Q),max(Qexp))),xlab="Time (min)",ylab="Heat flux Q (W/m^2)",col="red")
lines(Q,col="blue")
legend("topright", c("Measured", "Predicted"), pch="o", col=c("red", "blue"))
Qexp<-u4p$hp1flux1[index]
Qexp<- -Qexp[-1]
Tint<-u4p$T3[index]
Text<-u4p$T4[index]
t=u4p$id[index]
Tm=numeric()
Q=numeric()
mypar(1,1)
R1=0.2
R2=0.2
C=13640
Tm_init=8
tau=60
Qt<-function(R1,R2,Tm_init,C){
Tm[1]=Tm_init
for (i in 1:(length(t)-1)){
dt=60*(t[i+1]-t[i])
Q[i]=(Tint[i]-Tm[i])/R1
Tm[i+1]=((Tint[i+1]/R1)+(Text[i+1]/R2)+C*Tm[i]/dt)/(1/R1 + 1/R2 + C/dt)
}
Q
}
Q<-Qt(R1,R2,Tm_init,C)
plot(Qexp,type="l",ylim=c(min(min(Q),min(Qexp)),max(max(Q),max(Qexp))),xlab="Time (min)",ylab="Heat flux Q (W/m^2)",col="red")
lines(Q,col="blue")
legend("topright", c("Measured", "Predicted"), pch="o", col=c("red", "blue"))
Qexp<-u4p$hp1flux1[index]
Qexp<- -Qexp[-1]+15
Tint<-u4p$T3[index]
Text<-u4p$T4[index]
t=u4p$id[index]
Tm=numeric()
Q=numeric()
mypar(1,1)
R1=0.2
R2=0.2
C=13640
Tm_init=8
tau=60
Qt<-function(R1,R2,Tm_init,C){
Tm[1]=Tm_init
for (i in 1:(length(t)-1)){
dt=60*(t[i+1]-t[i])
Q[i]=(Tint[i]-Tm[i])/R1
Tm[i+1]=((Tint[i+1]/R1)+(Text[i+1]/R2)+C*Tm[i]/dt)/(1/R1 + 1/R2 + C/dt)
}
Q
}
Q<-Qt(R1,R2,Tm_init,C)
plot(Qexp,type="l",ylim=c(min(min(Q),min(Qexp)),max(max(Q),max(Qexp))),xlab="Time (min)",ylab="Heat flux Q (W/m^2)",col="red")
lines(Q,col="blue")
legend("topright", c("Measured", "Predicted"), pch="o", col=c("red", "blue"))
mypar(1,1)
R1=0.2
R2=0.2
C=13640
Tm_init=9
tau=60
Qt<-function(R1,R2,Tm_init,C){
Tm[1]=Tm_init
for (i in 1:(length(t)-1)){
dt=60*(t[i+1]-t[i])
Q[i]=(Tint[i]-Tm[i])/R1
Tm[i+1]=((Tint[i+1]/R1)+(Text[i+1]/R2)+C*Tm[i]/dt)/(1/R1 + 1/R2 + C/dt)
}
Q
}
Q<-Qt(R1,R2,Tm_init,C)
plot(Qexp,type="l",ylim=c(min(min(Q),min(Qexp)),max(max(Q),max(Qexp))),xlab="Time (min)",ylab="Heat flux Q (W/m^2)",col="red")
lines(Q,col="blue")
legend("topright", c("Measured", "Predicted"), pch="o", col=c("red", "blue"))
mypar(1,1)
R1=0.2
R2=0.2
C=13640
Tm_init=10
tau=60
Qt<-function(R1,R2,Tm_init,C){
Tm[1]=Tm_init
for (i in 1:(length(t)-1)){
dt=60*(t[i+1]-t[i])
Q[i]=(Tint[i]-Tm[i])/R1
Tm[i+1]=((Tint[i+1]/R1)+(Text[i+1]/R2)+C*Tm[i]/dt)/(1/R1 + 1/R2 + C/dt)
}
Q
}
Q<-Qt(R1,R2,Tm_init,C)
plot(Qexp,type="l",ylim=c(min(min(Q),min(Qexp)),max(max(Q),max(Qexp))),xlab="Time (min)",ylab="Heat flux Q (W/m^2)",col="red")
lines(Q,col="blue")
legend("topright", c("Measured", "Predicted"), pch="o", col=c("red", "blue"))
mypar(1,1)
R1=0.4
R2=0.4
C=13640
Tm_init=10
tau=60
Qt<-function(R1,R2,Tm_init,C){
Tm[1]=Tm_init
for (i in 1:(length(t)-1)){
dt=60*(t[i+1]-t[i])
Q[i]=(Tint[i]-Tm[i])/R1
Tm[i+1]=((Tint[i+1]/R1)+(Text[i+1]/R2)+C*Tm[i]/dt)/(1/R1 + 1/R2 + C/dt)
}
Q
}
Q<-Qt(R1,R2,Tm_init,C)
plot(Qexp,type="l",ylim=c(min(min(Q),min(Qexp)),max(max(Q),max(Qexp))),xlab="Time (min)",ylab="Heat flux Q (W/m^2)",col="red")
lines(Q,col="blue")
legend("topright", c("Measured", "Predicted"), pch="o", col=c("red", "blue"))
mypar(1,1)
R1=0.4
R2=0.4
C=13640
Tm_init=9
tau=60
Qt<-function(R1,R2,Tm_init,C){
Tm[1]=Tm_init
for (i in 1:(length(t)-1)){
dt=60*(t[i+1]-t[i])
Q[i]=(Tint[i]-Tm[i])/R1
Tm[i+1]=((Tint[i+1]/R1)+(Text[i+1]/R2)+C*Tm[i]/dt)/(1/R1 + 1/R2 + C/dt)
}
Q
}
Q<-Qt(R1,R2,Tm_init,C)
plot(Qexp,type="l",ylim=c(min(min(Q),min(Qexp)),max(max(Q),max(Qexp))),xlab="Time (min)",ylab="Heat flux Q (W/m^2)",col="red")
lines(Q,col="blue")
legend("topright", c("Measured", "Predicted"), pch="o", col=c("red", "blue"))
LL <- function(R1,R2,Tm_init,C, mu, sigma) {
R = Qexp-Qt(R1,R2,Tm_init,C)
#
R = suppressWarnings(dnorm(R, mu, sigma, log = TRUE))
#
-sum(R)
}
library(stats4)
fit4p<-mle(LL,
start = list(R1=0.4,R2=0.4,Tm_init=9,C=13640,sigma=1),
fixed=list(mu=0),
nobs = length(Q),
lower = c(.1,.1,5,10000,0.1),
upper = c(1,1.,17,2000000,5),
method= "L-BFGS-B"
)
Q<-Qt(coef(fit4p)[1],coef(fit4p)[2],coef(fit4p)[3],coef(fit4p)[4])
lines(Q,col="green")
summary(fit4p)
library(stats4)
fit4p<-mle(LL,
start = list(R1=0.4,R2=0.4,Tm_init=9,C=13640,sigma=1),
fixed=list(mu=0),
nobs = length(Q),
lower = c(.01,.01,1,10000,0.1),
upper = c(2,2.,17,2000000,5),
method= "L-BFGS-B"
)
summary(fit4p)
Q<-Qt(coef(fit4p)[1],coef(fit4p)[2],coef(fit4p)[3],coef(fit4p)[4])
lines(Q,col="green")
1/(.707+.0642)
setwd("C:/Users/Mike/Rspace/MITx7QBW/7.QBWx_Week_8_R")
source("qbwRModule.R")
y = rnorm(1000)
plot(y, ylab="y-axis label goes here")
abline(h=mean(y), col="green")
sdabove = mean(y)+sd(y)
sdbelow = mean(y)-sd(y)
abline(h=sdabove, col="orange")
abline(h=sdbelow, col="orange")
count(y, sdbelow, sdabove)
count(y, sdbelow, sdabove)/1000
# WORKING WITH REAL DATA
# Describing Real Data
mean(lowtemp)
mean(hightemp)
plotsidebyside(lowtemp, hightemp, "low", "high", "Thorax length (mm)")
boxplot(lowtemp, hightemp, names=c("low", "high"), ylab="Thorax length (mm)", xlab="Temperature condition")
## INTRODUCING STANDARD ERROR
data.sim = sim(1, 200)
names(data.sim)
head(data.sim$xvals)
head(data.sim$yvals)
plot(data.sim$xvals, data.sim$yvals) # no good since all x values are the same!
plot(jitter(data.sim$xvals), data.sim$yvals, col="grey") # add jitter on x values
m = mean(data.sim$yvals)
s = sem(data.sim$yvals)
points(1, m, pch="x")
below = m-2*s
above = m+2*s
errorbars(above, below)
install.packages("pheatmap")
source("qbwRModule.R")
y = rnorm(1000)
plot(y, ylab="y-axis label goes here")
abline(h=mean(y), col="green")
sdabove = mean(y)+sd(y)
sdbelow = mean(y)-sd(y)
abline(h=sdabove, col="orange")
abline(h=sdbelow, col="orange")
count(y, sdbelow, sdabove)
count(y, sdbelow, sdabove)/1000
# WORKING WITH REAL DATA
# Describing Real Data
mean(lowtemp)
mean(hightemp)
plotsidebyside(lowtemp, hightemp, "low", "high", "Thorax length (mm)")
boxplot(lowtemp, hightemp, names=c("low", "high"), ylab="Thorax length (mm)", xlab="Temperature condition")
## INTRODUCING STANDARD ERROR
data.sim = sim(1, 200)
names(data.sim)
head(data.sim$xvals)
head(data.sim$yvals)
plot(data.sim$xvals, data.sim$yvals) # no good since all x values are the same!
plot(jitter(data.sim$xvals), data.sim$yvals, col="grey") # add jitter on x values
m = mean(data.sim$yvals)
s = sem(data.sim$yvals)
points(1, m, pch="x")
below = m-2*s
above = m+2*s
errorbars(above, below)
plot(data.sim$xvals, data.sim$yvals) # no good since all x values are the same!
plot(jitter(data.sim$xvals), data.sim$yvals, col="grey") # add jitter on x values
nsamples = 100
samplesize = 25
datasets = sim(nsamples, samplesize)
datasets$yvals
plot(datasets$xvals, datasets$yvals, col="grey")
plot(datasets$xvals, datasets$yvals, col="grey")
str(datasets)
head9datasets$xvals
head(datasets$xvals)
col.means = colMeans(datasets$yvals)
col.sems = sem(datasets$yvals)
col.means
col.sems
points(1:nsamples, col.means, pch="x")
col.lowers = col.means-2*col.sems
col.uppers = col.means+2*col.sems
colors = errorbarcolors(col.uppers, col.lowers)
errorbars(col.uppers, col.lowers, col=colors)
abline(h=0, col="red")
print(count(0, col.lowers, col.uppers)/nsamples)
nsamples = 100
samplesize = 25
datasets = sim(nsamples, samplesize)
plot(datasets$xvals, datasets$yvals, col="grey")
col.means = colMeans(datasets$yvals)
col.sems = sem(datasets$yvals)
points(1:nsamples, col.means, pch="x")
col.lowers = col.means-2*col.sems
col.uppers = col.means+2*col.sems
colors = errorbarcolors(col.uppers, col.lowers)
errorbars(col.uppers, col.lowers, col=colors)
abline(h=0, col="red")
print(count(0, col.lowers, col.uppers)/nsamples)
nsamples = 100
samplesize = 25
datasets = sim(nsamples, samplesize)
plot(datasets$xvals, datasets$yvals, col="grey")
col.means = colMeans(datasets$yvals)
col.sems = sem(datasets$yvals)
points(1:nsamples, col.means, pch="x")
col.lowers = col.means-2*col.sems
col.uppers = col.means+2*col.sems
colors = errorbarcolors(col.uppers, col.lowers)
errorbars(col.uppers, col.lowers, col=colors)
abline(h=0, col="red")
print(count(0, col.lowers, col.uppers)/nsamples)
nsamples = 100
samplesize = 25
datasets = sim(nsamples, samplesize)
plot(datasets$xvals, datasets$yvals, col="grey")
col.means = colMeans(datasets$yvals)
col.sems = sem(datasets$yvals)
points(1:nsamples, col.means, pch="x")
col.lowers = col.means-2*col.sems
col.uppers = col.means+2*col.sems
colors = errorbarcolors(col.uppers, col.lowers)
errorbars(col.uppers, col.lowers, col=colors)
abline(h=0, col="red")
print(count(0, col.lowers, col.uppers)/nsamples)
nsamples = 100
samplesize = 25
datasets = sim(nsamples, samplesize)
plot(datasets$xvals, datasets$yvals, col="grey")
col.means = colMeans(datasets$yvals)
col.sems = sem(datasets$yvals)
points(1:nsamples, col.means, pch="x")
col.lowers = col.means-2*col.sems
col.uppers = col.means+2*col.sems
colors = errorbarcolors(col.uppers, col.lowers)
errorbars(col.uppers, col.lowers, col=colors)
abline(h=0, col="red")
print(count(0, col.lowers, col.uppers)/nsamples)
nsamples = 100
samplesize = 25
datasets = sim(nsamples, samplesize)
plot(datasets$xvals, datasets$yvals, col="grey")
col.means = colMeans(datasets$yvals)
col.sems = sem(datasets$yvals)
points(1:nsamples, col.means, pch="x")
col.lowers = col.means-2*col.sems
col.uppers = col.means+2*col.sems
colors = errorbarcolors(col.uppers, col.lowers)
errorbars(col.uppers, col.lowers, col=colors)
abline(h=0, col="red")
print(count(0, col.lowers, col.uppers)/nsamples)
fly.means = c(mean(lowtemp), mean(hightemp))
fly.sems = c(sem(lowtemp), sem(hightemp))
fly.lower = fly.means-2*fly.sems
fly.upper = fly.means+2*fly.sems
plot(c(1,2), fly.means)
errorbars(fly.lower, fly.upper)
plot(c(1,2), fly.means, ylim=c(0.9,1.2))
errorbars(fly.lower, fly.upper)
